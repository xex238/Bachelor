using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Task_3a
{
    class Program
    {
        // Вывод массива на экран
        public static void Print_vector(double[] vector, string s)
        {
            Console.WriteLine(s);
            for (int i=0; i<vector.Length; i++)
            {
                Console.Write("{0} ", vector[i]);
            }
            Console.WriteLine();
        }
        public static void Print_vector(int[] vector, string s)
        {
            Console.WriteLine(s);
            for (int i = 0; i < vector.Length; i++)
            {
                Console.Write("{0} ", vector[i]);
            }
            Console.WriteLine();
        }
        //public static void Print_vector(double[,] vector, int k, string s)
        //{
        //    Console.WriteLine(s);
        //    for (int i = 0; i < 3; i++)
        //    {
        //        Console.WriteLine("x{0} = {1}", i, vector[k, i]);
        //    }
        //    Console.WriteLine();
        //}
        public static void Print_vector(double[,] vector, int k)
        {
            // Для матлаба
            //Console.Write("plot3(");
            //for (int i=0; i<3; i++)
            //{
            //    Console.Write("{0:N5},", vector[k, i]);
            //}
            //Console.WriteLine("'o');");

            for (int i = 0; i < 3; i++)
            {
                Console.Write("{0:N3};", vector[k, i]);
            }
            Console.WriteLine();

            //Console.WriteLine("{0}; {1:N3}", k, vector[k, 2]);
        }
        // Вычисление суммы квадратов СНУ
        public static double Return_result(double[] input_vector)
        {
            double x = input_vector[0];
            double y = input_vector[1];
            double z = input_vector[2];

            double result = Math.Pow((2 * Math.Pow(Math.E, x) - Math.Log(y) + z), 2) + Math.Pow((Math.Sin(x) + 4 * y - z * z), 2) + Math.Pow((x + Math.Pow(y, 3) + z / 2), 2);

            return result;
        }
        public static double Return_result(double[,] input_vector, int k)
        {
            double x = input_vector[k, 0];
            double y = input_vector[k, 1];
            double z = input_vector[k, 2];

            double result = Math.Pow((2 * Math.Pow(Math.E, x) - Math.Log(y) + z), 2) + Math.Pow((Math.Sin(x) + 4 * y - z * z), 2) + Math.Pow((x + Math.Pow(y, 3) + z / 2), 2);

            return result;
        }
        // Умножение вектора на число
        public static double[] Multiplication_vector_on_number(int[] vector, double number)
        {
            double[] result_vector = new double[vector.Length];
            for (int i = 0; i < vector.Length; i++)
            {
                result_vector[i] = vector[i] * number;
            }
            return result_vector;
        }
        public static double[] Sum_of_vectors(double[,] vector_1, double[] vector_2, int k)
        {
            double[] result_vector = new double[vector_2.Length];

            for (int i = 0; i < result_vector.Length; i++)
            {
                result_vector[i] = 0;
            }

            if (vector_2.Length == 3)
            {
                for (int i = 0; i < result_vector.Length; i++)
                {
                    result_vector[i] = vector_1[k, i] + vector_2[i];
                }
            }
            else
            {
                Console.WriteLine("В методе Sum_of_vectors длины векторов оказались разными");
            }
            return result_vector;
        }
        // Решение СНУ методом покоординатного спуска
        public static void Coordinate_descent_method(double[] u0, double a, double lambda)
        {
            Console.WriteLine("Решение СНУ методом покоординатного спуска");

            const int n = 3; // Количество уравнений в системе
            int k = 0; // Текущая итерация
            int i_k = 0; // Вспомогательная переменная
            int[] p = new int[n];

            int limit_k = 0; // Предельное количество итераций
            Console.WriteLine("Введите предельное количество итераций");
            limit_k = int.Parse(Console.ReadLine());

            double[,] u = new double[limit_k, n];
            double[] helper_vector = new double[n];
            double J0 = 0;
            double J1 = 0;

            double e = 0;
            Console.WriteLine("Введите точность, с которой требуется найти решение");
            e = double.Parse(Console.ReadLine());

            for (int i = 0; i < n; i++)
            {
                p[i] = 0;
                u[0, i] = u0[i];
            }

            k = -1;
            do
            {
                label_1:
                k++;
                //Console.WriteLine("Итерация №{0}", k);
                if (k + 1 >= limit_k)
                {
                    Console.WriteLine("Не удалось найти решение за {0} итераций", limit_k);
                    return;
                }

                i_k = k - n * (k / n);

                for (int i = 0; i < n; i++)
                {
                    p[i] = 0;
                }
                p[i_k] = 1;

                //Print_vector(p, "Вектор p");

                if (Return_result(Sum_of_vectors(u, Multiplication_vector_on_number(p, a), k)) < Return_result(u, k))
                {
                    //Console.WriteLine("Выполнено 1");
                    J0 = Return_result(u, k);
                    J1 = Return_result(Sum_of_vectors(u, Multiplication_vector_on_number(p, a), k));
                    //Console.WriteLine("J(u_k + (a_k) * p_k) = {0}", Return_result(Sum_of_vectors(u, Multiplication_vector_on_number(p, a), k)));
                    //Console.WriteLine("J(u_k) = {0}", Return_result(u, k));
                    helper_vector = Sum_of_vectors(u, Multiplication_vector_on_number(p, a), k);
                    for (int i = 0; i < n; i++)
                    {
                        u[k + 1, i] = helper_vector[i];
                    }
                    Print_vector(u, k/*, "Вектор u_k"*/);
                }
                else if (Return_result(Sum_of_vectors(u, Multiplication_vector_on_number(p, -a), k)) < Return_result(u, k))
                {
                    //Console.WriteLine("Выполнено 2");
                    J0 = Return_result(u, k);
                    J1 = Return_result(Sum_of_vectors(u, Multiplication_vector_on_number(p, -a), k));
                    //Console.WriteLine("J(u_k - (a_k) * p_k) = {0}", Return_result(Sum_of_vectors(u, Multiplication_vector_on_number(p, -a), k)));
                    //Console.WriteLine("J(u_k) = {0}", Return_result(u, k));
                    helper_vector = Sum_of_vectors(u, Multiplication_vector_on_number(p, -a), k);
                    for (int i = 0; i < n; i++)
                    {
                        u[k + 1, i] = helper_vector[i];
                    }
                    Print_vector(u, k/*, "Вектор u_k"*/);
                }
                else
                {
                    //Console.WriteLine("Выполнено 3");
                    for (int i = 0; i < n; i++)
                    {
                        u[k + 1, i] = u[k, i];
                    }
                    if ((i_k + 1 == n))
                    {
                        a = lambda * a;
                    }
                    Print_vector(u, k/*, "Вектор u_k"*/);
                    goto label_1;
                }
            } while (Math.Abs(J1) > e);

            Console.WriteLine("Решение было найдено за {0} итераций", k);
            Print_vector(u, k/*, "Вектор с ответами"*/);
        }
        static void Main(string[] args)
        {
            // Используются следующая СНУ:
            // 2e^x - ln(y) + z = 0
            // sin(x) + 4y - z^2 = 0
            // x + y^3 + z / 2 = 0

            double[] u0 = new double[] { 10, 10, 10 }; // Начальное приближение
            double alfa = 0.5; // Размер шага (параметр метода)
            double lambda = 0.5; // Константа для уменьшения а (0 < lambda < 1) (параметр метода)
            Coordinate_descent_method(u0, alfa, lambda);
        }
    }
}
