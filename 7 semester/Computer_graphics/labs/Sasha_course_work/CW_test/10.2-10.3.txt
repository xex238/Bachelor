void accFrustun(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, GLdouble pixdx, GLdouble pixdy, GLdouble eyedx, GLdouble eyedy, GLdouble focus)
{
	GLdouble xwsize, ywsize;
	GLdouble dx, dy;
	GLint viewport[4];

	glGetIntegerv(GL_VIEWPORT, viewport);
	xwsize = right - left;
	ywsize = top - bottom;
	dx = -(pixdx * xwsize / (GLdouble)viewport[2] + eyedx * zNear / focus);
	dy = -(pixdy * ywsize / (GLdouble)viewport[3] + eyedy * zNear / focus);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glFrustum(left + dx, right + dx, bottom + dy, top + dy, zNear, zFar);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glTranslatef(-eyedx, -eyedy, 0.0);
}

void accPerspective(GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar, GLdouble pixdx, GLdouble pixdy, GLdouble eyedx, GLdouble eyedy, GLdouble focus)
{
	GLdouble fov2, left, right, bottom, top;
	fov2 = ((fovy * PI_) / 180.0) / 2.0;

	top = zNear / (cos(fov2) / sin(fov2));
	bottom = -top;
	right = top * aspect;
	left = -right;

	accFrustun(left, right, bottom, top, zNear, zFar, pixdx, pixdy, eyedx, eyedy, focus);
}

void init(void)
{
	GLfloat nat_anbient[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat nat_specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat light_position[] = { 0.0, 0.0, 10.0, 1.0 };
	GLfloat ln_ambient[] = { 0.2, 0.2, 0.2, 1.0 };

	glMaterialfv(GL_FRONT, GL_AMBIENT, nat_anbient);
	glMaterialfv(GL_FRONT, GL_SPECULAR, nat_specular);
	glMaterialf(GL_FRONT, GL_SHININESS, 50.0);
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);
	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, ln_ambient);

	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_DEPTH_TEST);
	glShadeModel(GL_FLAT);

	glClearColor(0.0, 0.0, 0.0, 0.0);
	glClearAccum(0.0, 0.0, 0.0, 0.0);
}

void Display_objects(void)
{
	GLfloat torus_diffuse[] = { 0.7, 0.7, 0.0, 1.0 };
	GLfloat cube_diffuse[] = { 0.0, 0.7, 0.7, 1.0 };
	GLfloat sphere_diffuse[] = { 0.7, 0.0, 0.7, 1.0 };
	GLfloat octa_diffuse[] = { 0.7, 0.4, 0.4, 1.0 };

	glPushMatrix();
	glTranslatef(0.0, 0.0, -5.0);
	glRotatef(30.0, 1.0, 0.0, 0.0);

	glPushMatrix();
	glTranslatef(-0.80, 0.35, 0.0);
	glRotatef(100.0, 1.0, 0.0, 0.0);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, torus_diffuse);
	glutSolidTorus(0.275, 0.85, 16, 16);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-0.75, -0.5, 0.0);
	glRotatef(45.0, 0.0, 0.0, 1.0);
	glRotatef(45.0, 1.0, 0.0, 0.0);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, cube_diffuse);
	glutSolidCube(1.5);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.75, 0.6, 0.0);
	glRotatef(30.0, 1.0, 0.0, 0.0);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, sphere_diffuse);
	glutSolidSphere(1.0, 16, 16);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.70, -0.90, 0.25);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, octa_diffuse);
	glutSolidOctahedron();
	glPopMatrix();

	glPopMatrix();
}

#define ACSIZE 8

void Display(void)
{
	GLint viewport[4];
	int jitter;

	glGetIntegerv(GL_VIEWPORT, viewport);

	glClear(GL_ACCUM_BUFFER_BIT);
	for (jitter = 0; jitter < ACSIZE; jitter++)
	{
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		accPerspective(50.0, (GLdouble)viewport[2] / (GLdouble)viewport[3], 1.0, 15.0, my_jitter.j8[jitter].X, my_jitter.j8[jitter].Y, 0.0, 0.0, 1.0); // Не j1, a j8
		Display_objects();
	}
	glAccum(GL_RETURN, 1.0);
	glFlush();
}

void Reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);
}

// Главный цикл
// Убедитесь в наличии запроса буфера накопления

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_ACCUM | GLUT_DEPTH);
	glutInitWindowSize(250, 250);
	glutInitWindowPosition(100, 100);
	glutCreateWindow(argv[0]);
	init();
	glutReshapeFunc(Reshape);
	glutDisplayFunc(Display);
	glutMainLoop();
	return 0;
}