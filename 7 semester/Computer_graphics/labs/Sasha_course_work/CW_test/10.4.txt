// "Дрожание" с помощью ортогональной проекции (10.4)

void Display(void)
{
	GLint viewport[4];
	int jitter;

	glGetIntegerv(GL_VIEWPORT, viewport);
	glClear(GL_ACCUM_BUFFER_BIT);
	for (jitter = 0; jitter < ACSIZE; jitter++)
	{
		// Заметьте, что 4.5 - это растояние в мировых координатах
		// между левой и правой сторонами и между верхней и нижней.
		// Эта формула преобразует движение пиксела от дробного значения
		// к мировым координатам
		glTranslatef(my_jitter.j8[jitter].X * 4.5 / viewport[2], my_jitter.j8[jitter].Y * 4.5 / viewport[3], 0.0);
		Display_objects();
		glPopMatrix();
		glAccum(GL_ACCUM, 1.0 / ACSIZE);
	}
	glAccum(GL_RETURN, 1.0);
	glFlush();
}

void Reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if (w <= h)
	{
		glOrtho(-2.25, 2.25, -2.25 * w / h, 2.25 * w / h, -10.0, 10.0);
	}
	else
	{
		glOrtho(-2.25 * w / h, 2.25 * w / h, -2.25, 2.25, -10.0, 10.0);
	}
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}