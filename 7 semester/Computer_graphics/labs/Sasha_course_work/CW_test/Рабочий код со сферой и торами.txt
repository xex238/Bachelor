#include <stdlib.h>
#include "glut.h"

#define YELLOWMAT 1
#define BLUEMAT 2

void init(void)
{
	GLfloat yellow_diffuse[] = { 0.7, 0.7, 0.0, 1.0 };
	GLfloat yellow_specular[] = { 1.0, 1.0, 1.0, 1.0 };

	GLfloat blue_diffuse[] = { 0.1, 0.1, 0.7, 1.0 };
	GLfloat blue_specular[] = { 0.1, 1.0, 1.0, 1.0 };

	GLfloat position_one[] = { 1.0, 1.0, 1.0, 0.0 };

	glNewList(YELLOWMAT, GL_COMPILE);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, yellow_diffuse);
	glMaterialfv(GL_FRONT, GL_SPECULAR, yellow_specular);
	glMaterialf(GL_FRONT, GL_SHININESS, 64.0);
	glEndList();

	glNewList(BLUEMAT, GL_COMPILE);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, blue_diffuse);
	glMaterialfv(GL_FRONT, GL_SPECULAR, blue_specular);
	glMaterialf(GL_FRONT, GL_SHININESS, 45.0);
	glEndList();

	glLightfv(GL_LIGHT0, GL_POSITION, position_one);
	glEnable(GL_LIGHT0);
	glEnable(GL_LIGHTING);
	glEnable(GL_DEPTH_TEST);

	glClearStencil(0x0);
	glEnable(GL_STENCIL_TEST);
}

/* Рисование сферы в ромбовидный контур,
   в центре окна с двумя торами. */

void Display(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// Там, где единицы, рисуется синяя сфера
	glStencilFunc(GL_EQUAL, 0x1, 0x1);
	glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
	glCallList(BLUEMAT);
	glutSolidSphere(0.5, 15, 15);

	// Если не единицы, рисуются торы
	glStencilFunc(GL_NOTEQUAL, 0x1, 0x1);
	glPushMatrix();
	glRotatef(45.0, 0.0, 0.0, 1.0);
	glRotatef(45.0, 0.0, 1.0, 0.0); // Возможно, неверная строка
	glCallList(YELLOWMAT);
	//glCallList(BLUEMAT); // Добавленная строка
	glutSolidTorus(0.275, 0.85, 15, 15);
	glPushMatrix();
	glRotatef(90.0, 1.0, 0.0, 0.0);
	glutSolidTorus(0.275, 0.85, 15, 15);
	glPopMatrix();
	glPopMatrix();

	glFlush();
}

void Display_2()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glCallList(BLUEMAT); // Задаёт цвет фигуры
	glutSolidSphere(0.5, 15, 15);
	//glutSolidSphere(0.5, 4, 4);

	glPushMatrix();
	glRotatef(45.0, 0.0, 0.0, 1.0);
	glRotatef(45.0, 0.0, 1.0, 0.0); // Возможно, неверная строка
	glCallList(YELLOWMAT); // Задаёт цвет фигуры
	glutSolidTorus(0.275, 0.85, 15, 15);

	glPushMatrix();
	glRotatef(90.0, 1.0, 0.0, 0.0);
	glutSolidTorus(0.275, 0.85, 15, 15);
	glPopMatrix();

	glPopMatrix();

	//glFlush();
}

/* Каждый раз при изменении геометрии окна переопределяется 
   система координат и перерисовывается область трафарета */

void Reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);

	// Создание области трафарета в виде ромба
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if (w <= h)
	{
		gluOrtho2D(-3.0, 3.0, -3.0 * (GLfloat)h / (GLfloat)w, 3.0 * (GLfloat)h / (GLfloat)w);
	}
	else
	{
		gluOrtho2D(-3.0 * (GLfloat)w / (GLfloat)h, 3.0 * (GLfloat)w / (GLfloat)h, -3.0, 3.0);
	}
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	glClear(GL_STENCIL_BUFFER_BIT);
	glStencilFunc(GL_ALWAYS, 0x1, 0x1);
	glStencilOp(GL_REPLACE, GL_REPLACE, GL_REPLACE);

	glBegin(GL_QUADS);
	glVertex2f(-1.0, 0.0);
	glVertex2f(0.0, 1.0);
	glVertex2f(1.0, 0.0);
	glVertex2f(0.0, -1.0);
	glEnd();

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0, (GLfloat)w / (GLfloat)h, 3.0, 7.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glTranslatef(0.0, 0.0, -5.0);
}

/* Главный цикл
   Убедитесь, что биты шаблона запрашиваются*/

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH | GLUT_STENCIL);
	glutInitWindowSize(400, 400);
	glutInitWindowPosition(100, 100);
	glutCreateWindow(argv[0]);
	init();
	glutReshapeFunc(Reshape);
	glutDisplayFunc(Display);
	glutMainLoop();
	return 0;
}